setwd("~/Downloads")
setwd("~/Downloads")
setwd("~/Downloads")
setwd("~/Documents/Psychology/Events x Headings/data")
library(tidyverse)
library(lsr)
library(ggpubr)
library(ez)
library(pwr)
library(psych)
library(gridExtra)
library(gtools)
library(ggplot2)
library(ggbeeswarm)
library(GGally)
library(BayesFactor)
library(svMisc)
rm(list = ls())
# Joan Danielle K. Ongchoco
# This code analyzes data for the Headings experiments.
######################################################################
# CLEAN DATA
# Load files
filenames = list.files(pattern=".csv")
ad = do.call("smartbind",lapply(filenames,read.csv,header=TRUE))
View(ad)
ad$rt
ad$subj_id = as.character(ad$subj_id)
included_subjects = unique(ad$subj_id[ad$test_part=='debrief'])
library(tidyverse)
library(lsr)
library(ggpubr)
library(ez)
library(pwr)
library(psych)
library(gridExtra)
library(gtools)
library(ggplot2)
library(ggbeeswarm)
library(GGally)
library(BayesFactor)
library(svMisc)
rm(list = ls())
# Joan Danielle K. Ongchoco
# This code analyzes data for the Headings experiments.
######################################################################
# CLEAN DATA
# Load files
filenames = list.files(pattern=".csv")
ad = do.call("smartbind",lapply(filenames,read.csv,header=TRUE))
# Get all subjects
ad$subj_id = as.character(ad$subj_id)
included_subjects = unique(ad$subj_id[ad$test_part=='debrief']) # Output only unique names
# Get debriefing responses
# Filter ad by test_part (set to debrief), then select only the data we want (using dplyr package)
codes = ad %>% filter(test_part == 'debrief') %>% dplyr::select(subj_id, time_elapsed, resp_attention, resp_final, completion_code)
codes$time_elapsed = codes$time_elapsed/1000/60
median(codes$time_elapsed)
######################################################################
# IDENTIFY VARIABLES
# PREDICTORS: subj_id, expt_condition, scroll_time, scroll_depth
# TARGETS: total_scrolls, total_time, total_reversals,
# scroll_speed (scroll_depth/time), error_detection
# scroll_time = time elapsed since start
# scroll_depth = position on the article
# This code just grabs all the relevant columns we want to look at
# You can use add other columns you want to look at by just adding to the list after "select"
test_data = ad %>% filter(test_part=='test_trial') %>%
select(subj_id, expt_condition,
total_reading_time, total_scrolls, num_scrolls_up,
scroll_type, scroll_time, scroll_duration, scroll_depth, onscreen_at_scroll,
heading_depths, clicked_typo_locations, clicked_typo_times,
typos_per_paragraph, num_typos_found)
test_data$total_reading_time = test_data$total_reading_time/1000/60
# Convert arrays to strings
test_data$scroll_type = as.character(test_data$scroll_type)
test_data$scroll_time = as.character(test_data$scroll_time)
test_data$scroll_depth = as.character(test_data$scroll_depth)
test_data$scroll_duration = as.character(test_data$scroll_duration)
test_data$onscreen_at_scroll = as.character(test_data$onscreen_at_scroll)
test_data$heading_depths = as.character(test_data$heading_depths)
test_data$clicked_typo_locations = as.character(test_data$clicked_typo_locations)
test_data$clicked_typo_times = as.character(test_data$clicked_typo_times)
test_data$typos_per_paragraph = as.character(test_data$typos_per_paragraph)
test_data$num_typos_found = as.character(test_data$num_typos_found)
# Split the strings to the different data points
test_data$scroll_type = strsplit(test_data$scroll_type, ',')
test_data$scroll_time = strsplit(test_data$scroll_time, ',')
test_data$scroll_depth = strsplit(test_data$scroll_depth, ',')
test_data$scroll_duration = strsplit(test_data$scroll_duration, ',')
test_data$onscreen_at_scroll = strsplit(test_data$onscreen_at_scroll, ',')
test_data$heading_depths = strsplit(test_data$heading_depths, ',')
test_data$clicked_typo_locations = strsplit(test_data$clicked_typo_locations, ',')
test_data$clicked_typo_times = strsplit(test_data$clicked_typo_times, ',')
test_data$typos_per_paragraph = strsplit(test_data$typos_per_paragraph, ',')
test_data$num_typos_found = strsplit(test_data$num_typos_found, ',')
# Transpose data from rows to columns
test_data_t = data.frame()
test_data_c = data.frame()
for (i in 1:nrow(test_data)){
sub = test_data$subj_id[i]
expt_condition = test_data$expt_condition[i]
sub_data = test_data %>% filter(subj_id == sub)
sub_data_t = data.frame(unlist(sub_data$scroll_type),
unlist(sub_data$scroll_time),
unlist(sub_data$scroll_depth),
unlist(sub_data$scroll_duration))
sub_data_t$subj_id = sub
sub_data_t$expt_condition = expt_condition
colnames(sub_data_t) = c("scroll_type", "scroll_time", "scroll_depth", "scroll_duration", "subj_id", "expt_condition")
sub_data_t$scroll_time = as.numeric(as.character(sub_data_t$scroll_time))
sub_data_t$scroll_depth = as.numeric(as.character(sub_data_t$scroll_depth))
sub_data_t$scroll_duration = as.numeric(as.character(sub_data_t$scroll_duration))
sub_data_t$scroll_time_norm = sub_data_t$scroll_time / sub_data_t$scroll_time[nrow(sub_data_t)]
test_data_t = rbind(test_data_t, sub_data_t)
}
View(test_data)
View(test_data)
View(test_data_t)
test_data$onscreen_at_scroll[1]
test_data$onscreen_at_scroll[2]
test_data$scroll_depth[2]
test_data$scroll_depth[1]
mean_data = test_data_t %>%
filter(scroll_duration > 0) %>%
select(scroll_duration, depth_diff)
test_data_t$depth_diff = 0
for (i in 1:nrow(test_data_t)){
# return true if there is a h in this item
test_data_t$is_heading[i] = grepl("(h", test_data_t$onscreen_at_scroll[i], fixed=TRUE)
if (test_data_t$scroll_duration[i] > 0){
test_data_t$depth_diff[i] = abs(test_data_t$scroll_depth[i] - test_data_t$scroll_depth[i-1])
}
}
library(tidyverse)
library(lsr)
library(ggpubr)
library(ez)
library(pwr)
library(psych)
library(gridExtra)
library(gtools)
library(ggplot2)
library(ggbeeswarm)
library(GGally)
library(BayesFactor)
library(svMisc)
rm(list = ls())
# Joan Danielle K. Ongchoco
# This code analyzes data for the Headings experiments.
######################################################################
# CLEAN DATA
# Load files
filenames = list.files(pattern=".csv")
ad = do.call("smartbind",lapply(filenames,read.csv,header=TRUE))
# Get all subjects
ad$subj_id = as.character(ad$subj_id)
included_subjects = unique(ad$subj_id[ad$test_part=='debrief']) # Output only unique names
# Get debriefing responses
# Filter ad by test_part (set to debrief), then select only the data we want (using dplyr package)
codes = ad %>% filter(test_part == 'debrief') %>% dplyr::select(subj_id, time_elapsed, resp_attention, resp_final, completion_code)
codes$time_elapsed = codes$time_elapsed/1000/60
median(codes$time_elapsed)
######################################################################
# IDENTIFY VARIABLES
# PREDICTORS: subj_id, expt_condition, scroll_time, scroll_depth
# TARGETS: total_scrolls, total_time, total_reversals,
# scroll_speed (scroll_depth/time), error_detection
# scroll_time = time elapsed since start
# scroll_depth = position on the article
# This code just grabs all the relevant columns we want to look at
# You can use add other columns you want to look at by just adding to the list after "select"
test_data = ad %>% filter(test_part=='test_trial') %>%
select(subj_id, expt_condition,
total_reading_time, total_scrolls, num_scrolls_up,
scroll_type, scroll_time, scroll_duration, scroll_depth, onscreen_at_scroll,
heading_depths, clicked_typo_locations, clicked_typo_times,
typos_per_paragraph, num_typos_found)
test_data$total_reading_time = test_data$total_reading_time/1000/60
# Convert arrays to strings
test_data$scroll_type = as.character(test_data$scroll_type)
test_data$scroll_time = as.character(test_data$scroll_time)
test_data$scroll_depth = as.character(test_data$scroll_depth)
test_data$scroll_duration = as.character(test_data$scroll_duration)
test_data$onscreen_at_scroll = as.character(test_data$onscreen_at_scroll)
test_data$heading_depths = as.character(test_data$heading_depths)
test_data$clicked_typo_locations = as.character(test_data$clicked_typo_locations)
test_data$clicked_typo_times = as.character(test_data$clicked_typo_times)
test_data$typos_per_paragraph = as.character(test_data$typos_per_paragraph)
test_data$num_typos_found = as.character(test_data$num_typos_found)
# Split the strings to the different data points
test_data$scroll_type = strsplit(test_data$scroll_type, ',')
test_data$scroll_time = strsplit(test_data$scroll_time, ',')
test_data$scroll_depth = strsplit(test_data$scroll_depth, ',')
test_data$scroll_duration = strsplit(test_data$scroll_duration, ',')
test_data$onscreen_at_scroll = strsplit(test_data$onscreen_at_scroll, ',')
test_data$heading_depths = strsplit(test_data$heading_depths, ',')
test_data$clicked_typo_locations = strsplit(test_data$clicked_typo_locations, ',')
test_data$clicked_typo_times = strsplit(test_data$clicked_typo_times, ',')
test_data$typos_per_paragraph = strsplit(test_data$typos_per_paragraph, ',')
test_data$num_typos_found = strsplit(test_data$num_typos_found, ',')
# Transpose data from rows to columns
test_data_t = data.frame()
test_data_c = data.frame()
for (i in 1:nrow(test_data)){
sub = test_data$subj_id[i]
expt_condition = test_data$expt_condition[i]
sub_data = test_data %>% filter(subj_id == sub)
sub_data_t = data.frame(unlist(sub_data$scroll_type),
unlist(sub_data$scroll_time),
unlist(sub_data$scroll_depth),
unlist(sub_data$scroll_duration))
sub_data_t$subj_id = sub
sub_data_t$expt_condition = expt_condition
colnames(sub_data_t) = c("scroll_type", "scroll_time", "scroll_depth", "scroll_duration", "subj_id", "expt_condition")
sub_data_t$scroll_time = as.numeric(as.character(sub_data_t$scroll_time))
sub_data_t$scroll_depth = as.numeric(as.character(sub_data_t$scroll_depth))
sub_data_t$scroll_duration = as.numeric(as.character(sub_data_t$scroll_duration))
sub_data_t$scroll_time_norm = sub_data_t$scroll_time / sub_data_t$scroll_time[nrow(sub_data_t)]
test_data_t = rbind(test_data_t, sub_data_t)
}
# Get the difference between a trial's scroll depth and the one before
test_data_t$depth_diff = 0
for (i in 1:nrow(test_data_t)){
# return true if there is a h in this item
test_data_t$is_heading[i] = grepl("(h", test_data_t$onscreen_at_scroll[i], fixed=TRUE)
if (test_data_t$scroll_duration[i] > 0){
test_data_t$depth_diff[i] = abs(test_data_t$scroll_depth[i] - test_data_t$scroll_depth[i-1])
}
}
